# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProjetosEstagio5CGEO
                                 A QGIS plugin
 Solução dos Estagiarios do 5 CGEO
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-04-04
        copyright            : (C) 2023 by Estagiarios 5 CGEO
        emails               : e.tadeu.eb@ime.eb.br
                               joao.pereira@ime.eb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Estagiarios do 5 CGEO'
__date__ = '2023-04-04'
__copyright__ = '(C) 2023 by Estagiarios 5 CGEO'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
from code import interact
from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.Qt import QVariant, QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProject,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterNumber,
                       QgsProcessingException,
                       QgsWkbTypes,
                       QgsExpressionContextUtils,
                       QgsPointXY,
                       QgsPoint,
                       QgsPointLocator,
                       QgsSpatialIndex,
                       QgsFeatureSink,
                       QgsFields,
                       QgsField,
                       QgsFeature,
                       QgsExpression,
                       QgsVectorLayer,
                       QgsProcessingMultiStepFeedback,
                       QgsProcessingOutputVectorLayer,
                       QgsProcessingParameterVectorLayer,
                       QgsFields,
                       QgsFeature,
                       QgsField,
                       QgsGeometry,
                       QgsGeometryUtils,
                       QgsGeometryCollection,
                       QgsMarkerSymbol)
import processing
from PyQt5.QtGui import QColor


class Projeto6Solucao(QgsProcessingAlgorithm):
    """
    
    Este algoritmo realiza a revisão de ligação entre produtos.

    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    # Camadas de input
    INPUT = 'INPUT'
    MIN_LENGTH = "MIN_LENGTH"

    # Camadas de output
    OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config):

        self.addParameter(QgsProcessingParameterVectorLayer(self.INPUT, self.tr('Insira a camada de linha'), 
                                                            types=[QgsProcessing.TypeVectorLine], 
                                                            defaultValue=None))
        
        self.addParameter(QgsProcessingParameterNumber(self.MIN_LENGTH,
                                                       self.tr('Insira a distancia mínima'),
                                                       defaultValue=10,
                                                       type=QgsProcessingParameterNumber.Double))

        self.addOutput(QgsProcessingOutputVectorLayer(self.OUTPUT, self.tr("Camada original com as linhas expandidas")))
        
        
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        inputLyr = self.parameterAsVectorLayer(parameters,self.INPUT,context)
        tol = self.parameterAsDouble(parameters, self.MIN_LENGTH, context)

        #Criação de uma camada de linhas de interseção entre os produtos
        for linhas in inputLyr.selectedFeatures():
            geometria = linhas.geometry()
                      
            for parts in geometria.parts():vertices = list(parts)
                            
            ponto_inicial = vertices[0]
            ponto_final = vertices[-1]

            #Obtenção do vetor direção
            vetor_direcao = ponto_final - ponto_inicial

            #Obtenção do comprimento do vetor
            comprimento_vetor = (vetor_direcao.x()**2 + vetor_direcao.y()**2)**0.5
           
            # Normaliza o vetor direção
            if comprimento_vetor > 0:
                vetor_direcao = QgsPoint(vetor_direcao.x() / comprimento_vetor, vetor_direcao.y() / comprimento_vetor)
            
            ponto_inicial_extendido = QgsPoint(ponto_inicial.x() - tol * vetor_direcao.x(), ponto_inicial.y() - tol * vetor_direcao.y())
            ponto_final_extendido = QgsPoint(ponto_final.x() + tol * vetor_direcao.x(), ponto_final.y() + tol * vetor_direcao.y())
            linha_extendida = QgsGeometry.fromPolyline([ponto_inicial_extendido, ponto_final_extendido])

            # bbox = geometria.buffer(tol, 8).boundingBox()
            for lines in inputLyr.selectedFeatures():
                geometry = lines.geometry()

                if geometria.disjoint(geometry) and linha_extendida.intersects(geometry) and linhas.id() != lines.id():
                    #feedback.pushInfo(f'\nA linha {linha_extendida} do tipo {type(linha_extendida)} intersepta a linha {geometry} do tipo {type(geometry)}.')
                    ponto_referencia = linha_extendida.intersection(geometry).asPoint()
                    #feedback.pushInfo(f'\nO ponto referencia {ponto_referencia} é do tipo {type(ponto_referencia)}')
                    #feedback.pushInfo(f'\nO ponto inicial {ponto_inicial} é do tipo {type(ponto_inicial)}')
                    dist1 = ponto_referencia.distance(QgsPointXY(ponto_inicial))
                    dist2 = ponto_referencia.distance(QgsPointXY(ponto_final))

                    if dist1 < dist2:
                        ponto_referencia = QgsPoint(ponto_referencia.x() - 1 * vetor_direcao.x(), ponto_referencia.y() - 1 * vetor_direcao.y()) #Está estendido em mais 1 metro
                        linha_extendida = QgsGeometry.fromPolyline([ponto_referencia, ponto_final])
                    else:
                        ponto_referencia = QgsPoint(ponto_referencia.x() + 1 * vetor_direcao.x(), ponto_referencia.y() + 1 * vetor_direcao.y()) #Está estendido em mais 1 metro
                        linha_extendida = QgsGeometry.fromPolyline([ponto_inicial, ponto_referencia])
                    linhas.setGeometry(linha_extendida)
                    inputLyr.updateFeature(linhas)

        return {self.OUTPUT: inputLyr}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Expandir linhas'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return 'Expandir linhas'

    """def groupId(self):
        
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        
        return 'Projeto 6'"""

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return Projeto6Solucao()
