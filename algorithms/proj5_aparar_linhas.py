# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProjetosEstagio5CGEO
                                 A QGIS plugin
 Solução dos Estagiarios do 5 CGEO
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-04-04
        copyright            : (C) 2023 by Estagiarios 5 CGEO
        emails               : e.tadeu.eb@ime.eb.br
                               joao.pereira@ime.eb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Estagiarios do 5 CGEO'
__date__ = '2023-04-04'
__copyright__ = '(C) 2023 by Estagiarios 5 CGEO'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'
from itertools import chain
from PyQt5.QtCore import QCoreApplication
from qgis.PyQt.QtCore import QVariant
from DsgTools.core.GeometricTools.layerHandler import LayerHandler
from qgis.core import (
    QgsDataSourceUri,
    QgsProject,
    QgsProcessingContext,
    QgsProcessingUtils,
    QgsGeometry,
    QgsFeature,
    QgsFeatureSink,
    QgsFeedback,
    QgsFeatureRequest,
    QgsField,
    QgsFields,
    QgsPointXY,
    QgsProcessing,
    QgsProcessingAlgorithm,
    QgsProcessingException,
    QgsProcessingFeedback,
    QgsProcessingMultiStepFeedback,
    QgsProcessingOutputVectorLayer,
    QgsProcessingParameterBoolean,
    QgsProcessingParameterDistance,
    QgsProcessingParameterFeatureSink,
    QgsProcessingParameterFeatureSource,
    QgsProcessingParameterField,
    QgsProcessingParameterMultipleLayers,
    QgsProcessingParameterNumber,
    QgsProcessingParameterVectorLayer,
    QgsVectorLayer,
    QgsWkbTypes,
)

from .algRunner import AlgRunner
from math import atan2, degrees


class Projeto5Solucao(QgsProcessingAlgorithm):
    INPUT = "INPUT"
    SELECTED = "SELECTED"
    TOLERANCE = "TOLERANCE"
    MIN_LENGTH = "MIN_LENGTH"
    OUTPUT = "OUTPUT"
    FLAGS = "FLAGS"

    def initAlgorithm(self, config):
        """
        Parameter setting.
        """
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.INPUT, self.tr("Input layer"), [QgsProcessing.TypeVectorLine]
            )
        )
        self.addParameter(
            QgsProcessingParameterBoolean(
                self.SELECTED, self.tr("Process only selected features")
            )
        )
        self.addParameter(
            QgsProcessingParameterDistance(
                self.TOLERANCE,
                self.tr("Snap radius"),
                parentParameterName=self.INPUT,
                minValue=-1.0,
                defaultValue=1.0,
            )
        )
        self.addParameter(
            QgsProcessingParameterNumber(
                self.MIN_LENGTH,
                self.tr("Minimum size"),
                minValue=0,
                type=QgsProcessingParameterNumber.Double,
                defaultValue=100,
            )
        )
        self.addOutput(
            QgsProcessingOutputVectorLayer(
                self.OUTPUT, self.tr("Original layer with overlayed lines")
            )
        )
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.FLAGS, self.tr("{0} Flags").format(self.displayName())
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        layerHandler = LayerHandler()
        algRunner = AlgRunner()
        inputLyr = self.parameterAsVectorLayer(parameters, self.INPUT, context)
        onlySelected = self.parameterAsBool(parameters, self.SELECTED, context)
        minLength = self.parameterAsDouble(parameters, self.MIN_LENGTH, context)
        tol = self.parameterAsDouble(parameters, self.TOLERANCE, context)
        self.prepareFlagSink(parameters, inputLyr, QgsWkbTypes.LineString, context)

        multiStepFeedback = QgsProcessingMultiStepFeedback(4, feedback)
        multiStepFeedback.setCurrentStep(0)

        if tol > 0:
            multiStepFeedback.pushInfo(
                self.tr("Identifying dangles on {layer}...").format(
                    layer=inputLyr.name()
                )
            )
            dangleLyr = AlgRunner().runIdentifyDangles(
                inputLayer=inputLyr,
                searchRadius=tol,
                context=context,
                onlySelected=onlySelected,
                ignoreDanglesOnUnsegmentedLines=True,
                inputIsBoundaryLayer=True,
                feedback=multiStepFeedback,
            )

            multiStepFeedback.setCurrentStep(1)
            layerHandler.filterDangles(dangleLyr, tol, feedback=multiStepFeedback)

            multiStepFeedback.setCurrentStep(2)
            multiStepFeedback.pushInfo(
                self.tr("Snapping layer {layer} to dangles...").format(
                    layer=inputLyr.name()
                )
            )
            algRunner.runSnapLayerOnLayer(
                inputLyr,
                dangleLyr,
                tol,
                context,
                feedback=multiStepFeedback,
                onlySelected=onlySelected,
            )

        multiStepFeedback.setCurrentStep(3)
        multiStepFeedback.pushInfo(
            self.tr("Cleanning layer {layer}...").format(layer=inputLyr.name())
        )
        algRunner.runDsgToolsClean(
            inputLyr,
            context,
            snap=tol,
            feedback=multiStepFeedback,
            onlySelected=onlySelected,
        )

        #return {self.OUTPUT: inputLyr}
    
        if inputLyr is None:
            return {self.OUTPUT: inputLyr, self.FLAGS: self.flag_id}
        # Compute the number of steps to display within the progress bar and
        # get features from source
        #feedbackTotal = 2
        #multiStepFeedback = QgsProcessingMultiStepFeedback(feedbackTotal, feedback)
        #multiStepFeedback.setCurrentStep(0)
        #multiStepFeedback.setProgressText(self.tr("Getting Dangles..."))
        #multiStepFeedback.setCurrentStep(1)
        #multiStepFeedback.setProgressText(self.tr("Raising flags..."))
        nDangles = dangleLyr.featureCount()
        if nDangles == 0:
            return {self.OUTPUT: inputLyr, self.FLAGS: self.flag_id}
        # currentValue = feedback.progress()

        danglelayer = QgsVectorLayer(f"LineString?crs={inputLyr.crs().authid()}",
                                     "arestas_soltas",
                                     "memory"
                                     )
        danglelayer.dataProvider().addAttributes([QgsField("id", QVariant.Int)])

        currentTotal = 100 / nDangles
        cont = 1
        for current, feat in enumerate(dangleLyr.getFeatures()):
            if multiStepFeedback.isCanceled():
                break
            dangleGeom = feat.geometry()
            dangleBB = dangleGeom.boundingBox()
            request = QgsFeatureRequest().setNoAttributes().setFilterRect(dangleBB)
            lineGeometry = [
                i.geometry()
                for i in inputLyr.getFeatures(request)
                if i.geometry().intersects(dangleGeom)
            ][0]
            if lineGeometry.length() > minLength:
                continue

            feature = QgsFeature()
            feature.setGeometry(lineGeometry)
            feature.setAttributes([cont])
            danglelayer.dataProvider().addFeature(feature)
            feedback.pushInfo(f'{lineGeometry} é uma linha de ponta solta.')
            danglelayer.updateExtents()
            cont += 1
            self.flagFeature(
                lineGeometry,
                self.tr(
                    f"First order dangle on {inputLyr.name()} smaller than {minLength}"
                ),
            )

            multiStepFeedback.setProgress(current * currentTotal)
        
        diferencalayer = QgsVectorLayer(f"LineString?crs={inputLyr.crs().authid()}",
                                     "diferença",
                                     "memory"
                                     )
        diferencalayer.dataProvider().addAttributes([QgsField("id", QVariant.Int)])
        cont = 1
        for linhas in inputLyr.getFeatures():
            linegeometria = linhas.geometry()
            flag = True
            for linhassoltas in danglelayer.getFeatures():
                linesoltageometria = linhassoltas.geometry()
                if linegeometria.equals(linesoltageometria):
                    flag = False

            if flag == True:
                feature = QgsFeature()
                feature.setGeometry(linegeometria)
                feature.setAttributes([cont])
                diferencalayer.dataProvider().addFeature(feature)
                feedback.pushInfo(f'{diferencalayer} é uma linha que quero.')
                diferencalayer.updateExtents()
                cont += 1
        QgsProject.instance().addMapLayer(diferencalayer)

        #Merge de linhas que não mudam de ângulo

        mescladalayer = QgsVectorLayer(f"LineString?crs={inputLyr.crs().authid()}",
                                     "mesclada",
                                     "memory"
                                     )
        mescladalayer.dataProvider().addAttributes([QgsField("id", QVariant.Int)])

        geometrias_mescladas = list()
        for feature in diferencalayer.getFeatures():
            geometria = feature.geometry()
            for i in range (0, len(geometrias_mescladas)):
                geometry = geometrias_mescladas[i]
                if geometria != geometry:
                    geometrias_mescladas.append(geometria)
        
        feedback.pushInfo(f"Há {len(geometrias_mescladas)} feições em geometrias mescladas!")
        for i, linha1 in enumerate(geometrias_mescladas):
            for j, linha2 in enumerate(geometrias_mescladas):
                if i != j:  # Não compare uma linha com ela mesma
                    # Verifique se as linhas compartilham um ponto de extremidade
                    for part in linha1.parts():
                        vertices = list(part)
                        ponto_inicio1 = QgsGeometry.fromPointXY(QgsPointXY(vertices[0].x(), vertices[0].y()))
                        ponto_fim1 = QgsGeometry.fromPointXY(QgsPointXY(vertices[-1].x(), vertices[-1].y()))
                    
                    for part in linha2.parts():
                        vertices = list(part)
                        ponto_inicio2 = QgsGeometry.fromPointXY(QgsPointXY(vertices[0].x(), vertices[0].y()))
                        ponto_fim2 = QgsGeometry.fromPointXY(QgsPointXY(vertices[-1].x(), vertices[-1].y()))

                    if (
                        ponto_inicio1 == ponto_inicio2 or
                        ponto_inicio1 == ponto_fim2 or
                        ponto_fim1 == ponto_inicio2 or
                        ponto_fim1 == ponto_fim2
                    ):
                        # Encontre o ângulo entre as duas linhas em graus
                        angulo = abs(degrees(atan2(
                            ponto_inicio2.y() - ponto_fim1.y(),
                            ponto_inicio2.x() - ponto_fim1.x()
                        )))

                        # Se o ângulo for aproximadamente 180 graus, mesclamos as linhas
                        tolerancia_angulo = 1  # Ajuste conforme necessário
                        if angulo > 180 - tolerancia_angulo and angulo < 180 + tolerancia_angulo:
                            # Mesclar as geometrias das linhas
                            nova_geometria = linha1.combine(linha2)
                            geometrias_mescladas[i] = nova_geometria

        # Adicione as geometrias mescladas à camada mesclada
        for geometria in geometrias_mescladas:
            nova_feature = QgsFeature()
            nova_feature.setGeometry(geometria)
            mescladalayer.dataProvider().addFeatures([nova_feature])

        # Atualize a camada mesclada
        mescladalayer.updateExtents()

        # Adicione a camada mesclada ao projeto
        QgsProject.instance().addMapLayer(mescladalayer)

        
        return {self.OUTPUT: inputLyr, self.FLAGS: self.flag_id} 

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Aparar linhas'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return 'Aparar linhas'

    """def groupId(self):
        
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        
        return 'Projeto 6'"""

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return Projeto5Solucao()
    
    def prepareFlagSink(self, parameters, source, wkbType, context, addFeatId=False):
        (self.flagSink, self.flag_id) = self.prepareAndReturnFlagSink(
            parameters, source, wkbType, context, self.FLAGS, addFeatId=addFeatId
        )

    def prepareAndReturnFlagSink(
        self, parameters, source, wkbType, context, UI_FIELD, addFeatId=False
    ):
        flagFields = self.getFlagFields(addFeatId=addFeatId)
        (flagSink, flag_id) = self.parameterAsSink(
            parameters,
            UI_FIELD,
            context,
            flagFields,
            wkbType,
            source.sourceCrs() if source is not None else QgsProject.instance().crs(),
        )
        if flagSink is None:
            raise QgsProcessingException(self.invalidSinkError(parameters, UI_FIELD))
        return (flagSink, flag_id)
    
    def getFlagFields(self, addFeatId=False):
        fields = QgsFields()
        fields.append(QgsField("reason", QVariant.String))
        if addFeatId:
            fields.append(QgsField("featid", QVariant.String))
        return fields
    
    def flagFeature(self, flagGeom, flagText, featid=None, fromWkb=False, sink=None):
        """
        Creates and adds to flagSink a new flag with the reason.
        :param flagGeom: (QgsGeometry) geometry of the flag;
        :param flagText: (string) Text of the flag
        """
        flagSink = self.flagSink if sink is None else sink
        newFeat = QgsFeature(self.getFlagFields(addFeatId=featid is not None))
        newFeat["reason"] = flagText
        if featid is not None:
            newFeat["featid"] = featid
        if fromWkb:
            geom = QgsGeometry()
            geom.fromWkb(flagGeom)
            newFeat.setGeometry(geom)
        else:
            newFeat.setGeometry(flagGeom)
        flagSink.addFeature(newFeat, QgsFeatureSink.FastInsert)