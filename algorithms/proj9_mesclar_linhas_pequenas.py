# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProjetosEstagio5CGEO
                                 A QGIS plugin
 Solução dos Estagiarios do 5 CGEO
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-04-04
        copyright            : (C) 2023 by Estagiarios 5 CGEO
        emails               : e.tadeu.eb@ime.eb.br
                               joao.pereira@ime.eb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Estagiarios do 5 CGEO'
__date__ = '2023-04-04'
__copyright__ = '(C) 2023 by Estagiarios 5 CGEO'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
from code import interact
from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.Qt import QVariant, QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSink,
                       QgsPoint,
                       QgsFeature,
                       QgsFeatureRequest,
                       QgsExpression,
                       QgsVectorLayer,
                       QgsProcessingParameterDistance,
                       QgsProcessingParameterNumber,
                       QgsProcessingMultiStepFeedback,
                       QgsProcessingParameterVectorLayer,
                       QgsProject,
                       QgsFields,
                       QgsFeature,
                       QgsField,
                       QgsGeometry,
                       QgsGeometryUtils,
                       QgsPointXY,
                       QgsWkbTypes)
import processing
from PyQt5.QtGui import QColor
import math

class Projeto9Solucao(QgsProcessingAlgorithm):
    """
    
    Este algoritmo realiza a revisão de ligação entre produtos.

    """
    # Camadas de input
    VIAS = 'VIAS'
    INPUT_MAX_SIZE = 'INPUT_MAX_SIZE'
    INPUT_ANGLE = 'INPUT_ANGLE'
    # Camadas de output
    OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config):
        
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.VIAS, 
                self.tr('Insira a camada de vias'), 
                types=[QgsProcessing.TypeVectorLine], 
                defaultValue=None)
            )
        
        self.addParameter(
            QgsProcessingParameterDistance(
                'INPUT_MAX_SIZE',
                self.tr('Insira o comprimento máximo das vias pequenas'), 
                parentParameterName = 'VIAS',
                optional = False,
                minValue=0,
                defaultValue=0.005)
            )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                'INPUT_ANGLE',
                self.tr('Insira o desvio máximo (em graus) para detectar continuidade'), 
                type=QgsProcessingParameterNumber.Double, 
                minValue=0)
            )
        
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT, 
                self.tr('Vias com cruzamentos corrigidos'), 
                type=QgsProcessing.TypeVectorLine, 
                createByDefault=True, 
                supportsAppend=True, 
                defaultValue='TEMPORARY_OUTPUT')
            )
        
        
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        vias = self.parameterAsVectorLayer(parameters,self.VIAS,context)
        alcance_max = self.parameterAsDouble(parameters,self.INPUT_MAX_SIZE, context)
        angle = self.parameterAsDouble(parameters,self.INPUT_ANGLE, context)

        #Criação da lista de feições de linhas pequenas
        smallLines = list()       
        for lyr in vias.getFeatures():
            length = lyr.geometry().length()
            if length < alcance_max: smallLines.append(lyr)

        #pointsflag = QgsVectorLayer(f"LineString?crs={vias.crs().authid()}",
        #                             "newlines",
        #                             "memory"
        #                             )
        #pointsflag.dataProvider().addAttributes([QgsField("id", QVariant.Int)])
        
        vias.startEditing()
        for feature in smallLines:
            if feedback.isCanceled():
                return {self.OUTPUT: "cancelado pelo usuário"}
            featgeom = feature.geometry()
            for geometry in featgeom.constGet():
                ptFin = QgsGeometry.fromPointXY(QgsPointXY(geometry[0])) #O original é -1. para exemplo colocarei 0
                lineTouched = self.linesTouched(vias, feature, ptFin)

            if len(lineTouched) == 0:
                continue
            #Aqui ele verificou quais linhas tocaram no último vértice da linha pequena

            #2ª parte
            smallerAngle = 360
            for lineToBeSelected in lineTouched:
                angMinus180 = abs(self.anglesBetweenLines(feature, lineToBeSelected, ptFin)-180)
                #feedback.pushInfo(f'O ângulo entre as linhas {feature} e {geometry} é de {angMinus180}.')
                #feedback.pushInfo(f'A linha {lineToBeSelected} é do tipo {type(lineToBeSelected)}.')
                if angMinus180<smallerAngle:
                    smallerAngle=angMinus180
                    line = lineToBeSelected
            #Até aqui, ele calcula o ângulo entre a linha pequena e as linhas que a tocam, e separa as linhas menores que a tolerancia 

            #3ª parte
                    if self.anglesBetweenLines(feature, line, ptFin) < (180 + angle) and self.anglesBetweenLines(feature, line, ptFin) > (180 - angle):
                        #feedback.pushInfo(f'As linhas {feature["nome"]} e {line["nome"]} podem se mesclar.')
                        feicao = QgsFeature()
                        new_line = feature.geometry().combine(line.geometry())
                        feicao.setGeometry(new_line)
                        feicao.setAttributes(line.attributes())
                        vias.dataProvider().addFeatures([feicao])
                        vias.deleteFeature(line.id())
                        vias.deleteFeature(feature.id())
                        vias.updateExtents()
                        
        #for line in lineTouched:
        #    feicao = QgsFeature()
        #    feicao.setGeometry(line.geometry())
        #    pointsflag.dataProvider().addFeatures([line])
        #    pointsflag.updateExtents()
        #QgsProject.instance().addMapLayer(pointsflag)
        
        return {self.OUTPUT: vias}

    def linesTouched(self, layer, feature, point):
        lines = []
        AreaOfInterest = feature.geometry().boundingBox()
        request = QgsFeatureRequest().setFilterRect(AreaOfInterest)
        for feat in layer.getFeatures(request):
            if feat.geometry().intersects(point):
                if str(feature.geometry())==str(feat.geometry()):
                    continue
                lines.append(feat)
        return lines
    
    def anglesBetweenLines(self, line1, line2, point):
        pointB = QgsPointXY(point.asPoint())
        pointA = self.adjacentPoint(line1, pointB)
        pointC = self.adjacentPoint(line2, pointB)
        angleRad = QgsGeometryUtils().angleBetweenThreePoints(pointA.x(), pointA.y(), pointB.x(), pointB.y(), pointC.x(), pointC.y())
        angle = math.degrees(angleRad)

        return abs(angle)
    
    def adjacentPoint(self, line, point):
        vertexPoint = line.geometry().closestVertexWithContext(point)[1]
        adjpoints = line.geometry().adjacentVertices(vertexPoint)
        adjptvertex = adjpoints[0]
        if adjptvertex<0:
            adjptvertex = adjpoints[1]
        adjpt = line.geometry().vertexAt(adjptvertex)
        return QgsPointXY(adjpt)
    
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Mesclas linhas pequenas'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return 'Mesclar linhas pequenas'

    """def groupId(self):
        
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        
        return 'Projeto 6'"""

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return Projeto9Solucao()
