# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProjetosEstagio5CGEO
                                 A QGIS plugin
 Solução dos Estagiarios do 5 CGEO
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-04-04
        copyright            : (C) 2023 by Estagiarios 5 CGEO
        emails               : e.tadeu.eb@ime.eb.br
                               joao.pereira@ime.eb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Estagiarios do 5 CGEO'
__date__ = '2023-04-04'
__copyright__ = '(C) 2023 by Estagiarios 5 CGEO'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import sys
import inspect
from PyQt5.QtWidgets import QAction, QMenu
from PyQt5.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterNumber,
                       QgsProcessingOutputVectorLayer,
                       QgsProcessingParameterVectorLayer,
                       QgsGeometry,
                       QgsApplication)

from .estagio_5CGEO_provider import Estagio5CGEOProvider
from qgis.utils import iface
cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]

if cmd_folder not in sys.path:
    sys.path.insert(0, cmd_folder)

class Estagio5CGEOPlugin(object):

    def __init__(self, iface):
        #self.provider = None
        self.iface = iface

    def initProcessing(self):
        """Init Processing provider for QGIS >= 3.8."""
        self.provider = Estagio5CGEOProvider()
        QgsApplication.processingRegistry().addProvider(self.provider)

    def initGui(self):
        self.initProcessing()
        icon = os.path.join(os.path.join(cmd_folder, '5cgeo.png'))
        self.action = QAction(QIcon(icon), 'Projetos do 5° CGEO', self.iface.mainWindow())
        self.iface.addToolBarIcon(self.action)
        self.action.triggered.connect(self.run)

    def unload(self):
        QgsApplication.processingRegistry().removeProvider(self.provider)
        self.iface.removeToolBarIcon(self.action)
        del self.action

    def run(self):
        inputLyr = iface.activeLayer()
        distance = 10 #Pode ser ajustado conforme necessidade

        # Check if a layer is selected
        if not inputLyr:
            iface.messageBar().pushMessage('Please select a layer',  level=Qgis.Critical)

        else:    
            #Criação de uma camada de linhas de interseção entre os produtos
            for linhas in inputLyr.getFeatures():
                geometria = linhas.geometry()
                for parts in geometria.parts():vertices = list(parts)

                #Atribuição dos pontos extremos
                ponto_inicial = vertices[0]
                ponto_final = vertices[-1]

                #Distância entre os pontos extremos
                distancia = ponto_final.distance(ponto_inicial)

                #Condição para caso a distância entre os pontos extremos distam menor que a distancia minima
                if distancia <= distance: vertices.append(ponto_inicial)
                
                #Inserção da linha fechada à camada
                linha_fechada = QgsGeometry.fromPolyline(vertices)
                linhas.setGeometry(linha_fechada)
                inputLyr.updateFeature(linhas)
        self.iface.messageBar().pushMessage('Linha selecionada fechada')